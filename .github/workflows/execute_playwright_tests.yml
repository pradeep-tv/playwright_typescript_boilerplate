name: Playwright Tests
on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT:
        description: "Environment (dev/uat/prod)"
        type: choice
        options:
          - prod
          - uat
          - dev
        required: true
        default: "prod"
      TEST_TYPE:
        description: "TestType"
        type: choice
        default: 'SMOKE'
        options:
          - SMOKE
          - E2E
          - VERIFICATION
          - FIELDVALIDATION
          - LOCALIZATION
          - PRECONDITION
      MODULE_TYPE:
        description: "Projects"
        type: choice
        default: 'CPORT'
        options:
          - CPORT
          - CPAC
          - CONNECT_DESK
          - ALL
      
      ALL_SERVICES:
        description: "All Services"
        type: boolean
        default: false
      SELECTED_SERVICES:
        description: "Multiple Services"
        default: '{"cost_contract": "1", "drivers": "1", "precheck": "0", "safety": "0", "vehicles": "0"}'
        
jobs:
  test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble # latest Playwright docker image
    env:
      id: configure-env
      # Workflow-level environment variable
      TEST_ENV: ${{ github.event.inputs.ENVIRONMENT || 'prod' }}
      TEST_TYPE: ${{ github.event.inputs.TEST_TYPE || 'SMOKE' }}
      MODULE_TYPE: ${{ github.event.inputs.MODULE_TYPE || 'CPORT' }}
      ALL_SERVICES: ${{ github.event.inputs.ALL_SERVICES || false }}
      SELECTED_SERVICES: ${{ github.event.inputs.SELECTED_SERVICES }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: npm ci

    - name: Install jq
      run: apt-get update && apt-get install -y jq
      
    - name: Run Playwright tests
      id: playwright-tests
      run: |
        echo "Running Playwright tests..."
        TIMESTAMP=$(date +'%Y-%m-%d-%H-%M')
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_OUTPUT

        TEST_ENV="${{ env.TEST_ENV }}"
        TEST_TYPE="${{ env.TEST_TYPE }}"
        MODULE_TYPE="${{ env.MODULE_TYPE }}"
        ALL_SERVICES="${{ env.ALL_SERVICES }}"
        SELECTED_SERVICES='${{ env.SELECTED_SERVICES }}'
 
        echo "TEST_ENV : $TEST_ENV"
        echo "TEST_TYPE : $TEST_TYPE"
        echo "MODULE_TYPE : $MODULE_TYPE"
        echo "ALL_SERVICES : $ALL_SERVICES"
        echo "SELECTED_SERVICES : $SELECTED_SERVICES"

        # Determine run path
        RUN_PATH=""
        MODULE_TYPE=$(echo "$MODULE_TYPE" | xargs)
        
        if [ "$MODULE_TYPE" = "CPORT" ]; then
          if [ "$ALL_SERVICES" = "true" ]; then
            RUN_PATH="$MODULE_TYPE"
          else
            echo "$SELECTED_SERVICES" | jq .
            # Extract keys with value "1"
            SERVICES=$(echo $SELECTED_SERVICES | jq -r 'to_entries | map(select(.value=="1")) | .[].key')
        
            if [ -z "$SERVICES" ]; then
              echo "⚠️ No services selected, falling back to MODULE_TYPE"
              RUN_PATH="$MODULE_TYPE"
            else
              for service in $SERVICES; do
                RUN_PATH="$RUN_PATH $MODULE_TYPE/tests/$service"
              done
            fi
          fi
        elif [ "$MODULE_TYPE" = "ALL" ]; then
          # Base modules
          RUN_PATH="CPAC CONNECT_DESK"
          
          if [ "$ALL_SERVICES" = "true" ]; then
            # Include CPORT fully
            RUN_PATH="$RUN_PATH CPORT"
          else
            echo "$SELECTED_SERVICES" | jq .
            SERVICES=$(echo $SELECTED_SERVICES | jq -r 'to_entries | map(select(.value=="1")) | .[].key')
        
            if [ -z "$SERVICES" ]; then
              echo "⚠️ No services selected, including all modules"
              RUN_PATH="$RUN_PATH CPORT"
            else
              # Include only selected CPORT services
              for service in $SERVICES; do
                RUN_PATH="$RUN_PATH CPORT/tests/$service"
              done
            fi
          fi
        else
          RUN_PATH="$MODULE_TYPE"
        fi
        
        echo "RUN_PATH = $RUN_PATH"
        
        # Execute Playwright with dynamic path
        npx playwright test $RUN_PATH
        
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 1
